+ make ServoMotor class keep track of the written angle, update Joint and Arm2D classes to set their initial targets accordingly.
+ make ServoMotor class periodically save their last written angle to a file, and load it on init (to avoid sudden jumps on startup)
+ reflash with standard MP firmware
+ revert back to hardware encoder
+ make arm2D automatically disable if any joint is enabled, and disable all joints if it is enabled to avoid control conflicts.
+ split oop into more organized files
+ implement web command system
+ figure out why the entire project can't be upped at once from PyMakr (maybe firmware version)?
+ add electromagnet http endpoint
+ add other control mode enpoints
+ add DC motor + encoder controller
- add platform speed and pos control endpoint
- add arm (circular?) exclusion zones to protect servos. but we need to make sure that even if the selected location is valid, the trajectory doesn't cross an exclusion zone.
- figure out what's causing those servo jumps
- research BLE for less latency

HARDWARE
+ Electromagnet holder
+ Make tripod base with 3 caster wheels, 1 infront, 2 behind.
+ decrease axle height slightly + reinforce base axle.
+ more surface area for breadboard support + ziptie holes
- redesign battery holder for less risk of breaking
